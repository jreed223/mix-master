import { getData, getRefreshToken } from "./AuthHandler";


/** Fetches user using the current access token. 
 * If the access token is expired, the user is fetched using a new access token generated by the refresh token. */
export async function fetchProfile(token: string): Promise<UserProfile | null> {
    const clientId = "002130106d174cc495fc8443cac019f2";

    const refreshToken = getData("refresh_token");


    try{
    const result = await fetch("https://api.spotify.com/v1/me", {
        method: "GET", headers: { Authorization: `Bearer ${token}` }
    });

    if(!result.ok){ //If unable to fetch profile (access token expired)
        if(refreshToken && refreshToken !== 'undefined'){
        try{
            //get new access token using the stored refresh token and load the user
            await getRefreshToken(clientId, refreshToken).then(async (newAccessToken)=>{

                if(newAccessToken){
                    const refreshedProfile = await fetch("https://api.spotify.com/v1/me", {
        method: "GET", headers: { Authorization: `Bearer ${newAccessToken}` }});

        if(!refreshedProfile){
                window.localStorage.clear();
                window.sessionStorage.clear();
            }else{
                const user: UserProfile = await refreshedProfile.json();
                console.log(user)
                return user
            }

        }})

        }catch(e){
            console.log(e)
            window.localStorage.clear();
            window.sessionStorage.clear();
        }
    }
    }

    const user: UserProfile = await result.json();
    return user
}catch(e){

    console.log(e);

}

}

